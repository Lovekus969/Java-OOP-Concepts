        What is an Interface?

                              In Java (and in OOP generally), an interface is like a contract or blueprint that defines what methods a class must have, but not how they are implemented.
                              It only specifies the method signatures (name, return type, parameters).
                              No implementation details inside (except for default and static methods after Java 8).
                              A class that uses (implements) an interface must provide the method bodies.

        Real-world analogy
                        
                        Think of an electrical socket:
                        The socket’s shape and pins are like an interface — it defines what a plug should look like.
                        The actual current/voltage generation is hidden — that’s the implementation.
                        Different devices (fan, phone charger, lamp) can all work with the same socket as long as they follow the standard.
        Why Do We Need Interfaces?

                        Without interfaces, our code would be:
                        Less flexible
                        Harder to extend
                        More tightly coupled
Key reasons:

Multiple inheritance of behavior
                        Java doesn’t allow a class to extend more than one class, but a class can implement multiple interfaces.
                        Loose coupling:=> Code using an interface doesn’t care about the actual class — it just knows the class follows the rules in the interface.   
                        Scalability:=> You can add new classes later without changing the code that uses the interface.
                        Testability :=> Interfaces make it easy to mock classes during testing (common in big applications).

Significance of Interfaces in Computer Science
                        Interfaces aren’t just a Java feature — the concept is huge in software engineering and CS:
                        Encapsulation of behavior → Only the what, not the how.
                        Design by contract → Forces a structure in your code.
                        Supports polymorphism → The same variable can refer to different types of objects as long as they share an interface.
                        Used in API design → Many Java APIs, frameworks, and libraries rely heavily on interfaces so users can plug in their own implementations.
                        Foundations of large systems → In microservices, different services communicate through “interfaces” (protocols, APIs).

An abstract class in Java is a class that:
                        Cannot be instantiated directly (you cannot create an object of it).
                        Can have both abstract methods (without a body) and normal methods (with a body).
                        Is meant to be inherited by other classes that will provide the implementation for the abstract methods.

Object-oriented programming
Types
● Primitive types
● Reference Type
● Parameter Passing
● The this reference
● Variables and Scope
● Casting

Let's talk about one by one : 
  Primitive :=>
          Basic data types built into Java.
          Stored directly in memory (stack).
          Examples: int, float, double, boolean, char, byte, short, long.
          int speed = 280;  // primitive type
          boolean isFast = true;


 Reference Types : = > 
        Objects created from classes are reference types.
        Variables store reference (memory address), not the actual object.
        Examples: Strings, Arrays, Custom Classes like BMW.
````` BMW car1 = new M4-CS(280,4.1);

Parameter Passing =>>
          Java is pass-by-value:
          For primitive types, value is copied.
          For reference types, the reference (memory address) is copied, so object changes reflect outside.

The this reference: =>
        Refers to the current object.
        Used to distinguish object fields from parameters.

Variables and Scope : =>
        Instance Variables → belong to object, accessible anywhere in class
        Static Variables → belong to class, shared by all objects
        Local Variables → declared inside method, exist only during method execution
        Block Scope → variables exist only inside { } block
let see the example here : - 
           

          class BMW {
                static int carCount = 0; // static variable
                int topSpeed;             // instance variable
            
                void updateSpeed() {
                    int temp = 10;        // local variable, only inside this method
                }
            }

 Casting: => 
            Converting one type to another
            Primitive Casting:
            Widening (automatic): int → double
            Narrowing (manual): double → int

